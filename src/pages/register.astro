---
// import { isRegistered, registerUser } from "../../data/users"
import { isRegistered } from "../utils/isRegistered"
import { isValidated } from "../utils/isValidated";
import { initializeDrizzle } from "../utils/db";
import { Hash } from "../utils/hash"
import { isVerify } from "../utils/isVerify"
import { user, todos } from "../db/schema";
import { drizzle } from "drizzle-orm/d1";

import Layout from "../layouts/Layout.astro";
import type { ACTION_ERROR_CODES } from "astro:actions";
import { isValid, string } from "astro/zod";
import { ConsoleLogWriter } from "drizzle-orm";

const errors = { username: "", email: "", password: ""};

if (Astro.request.method === "POST") {
    // console.log("===Astro.local\n",Astro.locals.runtime.env.lucia)
    const db = initializeDrizzle(Astro.locals.runtime.env.DB);
  try {
    const data = await Astro.request.formData();
    // const name = data.get("username");
    const email = String(data.get("email"))
    const password = String(data.get("password"));
    // if (
    //     typeof name !== "string" ||
	// 	name.length < 6 || 30 < name.length ||
	// 	!/^[a-z0-9_-]+$/.test(name)
    // ) {
    //   errors.username = "Please enter a username. ";
    // }
    if (typeof email !== "string" || isValidated.email(email) === false) {
      errors.email = "メールアドレスが不正です ";
    } else if (await isRegistered.email(db, email)) {
      errors.email = "登録済みのメールアドレスです. ";
    }

    if (typeof password !== "string" || isValidated.password(password) === false) {
      errors.password = "パスワードが登録できません。８文字以上２５文字以下、英大文字小文字数字をそれぞれ１文字以上含めてください";
    }
    const hashed_password = await Hash.password(password)
    const is_password = await isVerify.hashed_password(hashed_password, password)
    if (is_password === false) {
      errors.password = "パスワードでエラーが発生しました。もう一度やり直してください"
    }
    const hasErrors = Object.values(errors).some(msg => msg)
    if (!hasErrors) {  
      try {
        const result = await db
          .insert(user)
          .values({
            id: undefined,
            mailAddress: email,
            hashedPassword: hashed_password,
            name: undefined,
          }).returning()
        console.log("db result===", result[0])
        return Astro.redirect("/login");
      } catch(e) {
        console.log(e)
      }

    }
  } catch (error) {
    if (error instanceof Error) {
        console.log(error.message)
    }
  }
}
---
<Layout title="Register Page">
    <h1>Register</h1>
    <form method="POST">
      <!-- <label>
        Username:
        <input type="text" name="username" />
      </label>
      {errors.username && <p>{errors.username}</p>}
      {errors.unique_error && <p>{errors.unique_error}</p>} -->
      <label>
        Email:
        <input type="email" name="email" placeholder="example@mail.com" value="" required />
      </label>
      {errors.email && <p>{errors.email}</p>}
      <label>
        Password:
        <input type="password" name="password" placeholder="パスワードを入力" minlength="8" maxlength="25" required/>
      </label>
      {errors.password && <p>{errors.password}</p>}
      <button>Register</button>
    </form>
</Layout>